{"version":3,"file":"static/js/733.c485e392.chunk.js","mappings":"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","sources":["components/guessMyNumber/formArea/formArea.js","components/guessMyNumber/infoArea/infoArea.js","components/guessMyNumber/features/createSecretNumber.js","components/guessMyNumber/secretNumber/secretNumber.js","components/guessMyNumber/gameTitle/GameTitle.js","components/guessMyNumber/restartButton/restartButton.js","components/guessMyNumber/backToAllButton/backToAllButton.js","components/guessMyNumber/guessMyNumber.js"],"sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as yup from 'yup';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { changeHighScore, changeScore, setGameStatus, setUserNumber } from '../features/numberSlice';\r\n\r\nimport './formArea.scss'\r\n\r\nconst FormArea = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        className=\"gmn__left\"\r\n        initialValues = {{\r\n          number: ''\r\n        }}\r\n        validationSchema = {yup.object({\r\n          number: yup.number()\r\n            .min(1, 'Number must be greater than or equal to 1')\r\n            .max(20, 'Number must be less than or equal to 20')\r\n            .required('This field is required')\r\n        })}\r\n        onSubmit = {({number}, {resetForm}) => {\r\n          dispatch(setUserNumber(number))\r\n          dispatch(changeScore())\r\n          dispatch(changeHighScore())\r\n          dispatch(setGameStatus())\r\n          resetForm()\r\n        }}\r\n      >\r\n        <Form>\r\n          <label htmlFor=\"number\"></label>\r\n          <Field\r\n            name='number' \r\n            className='gmn__guess' \r\n            placeholder='Num'\r\n          />\r\n          <button\r\n            type='submit'   \r\n            className=\"btn-guess\"\r\n          >\r\n            Check!\r\n          </button>\r\n          <ErrorMessage component='div' className='gmn__error-message' name='number'/>\r\n        </Form>\r\n      </Formik>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FormArea;","import { useSelector } from 'react-redux';\r\nimport { createSelector } from '@reduxjs/toolkit';\r\n\r\nimport './infoArea.scss';\r\n\r\nconst InfoArea = () => {\r\n\r\n  const selectMessage = createSelector(\r\n    (state) => state.guessNumber.userNumber,\r\n    (state) => state.guessNumber.secretNumber,\r\n    (userNumber, secretNumber) => {\r\n      if (userNumber) {\r\n        if (userNumber > secretNumber) {\r\n          return 'Too high (oﾟvﾟ)ノ';\r\n        } else if (userNumber < secretNumber) {\r\n          return 'Too low (‾◡◝)';\r\n        } else if (userNumber === secretNumber) {\r\n          return 'CORRECT ヾ(≧▽≦*)o';\r\n        }\r\n      } else {\r\n        return 'Write your number (≧∇≦)ﾉ';\r\n      }\r\n    }\r\n  )\r\n \r\n  const score = useSelector(state => state.guessNumber.score);\r\n  const highscore = useSelector(state => state.guessNumber.highscore);\r\n  const message = useSelector(selectMessage);\r\n  const gameStatus = useSelector(state => state.guessNumber.gameStatus);\r\n\r\n  return (\r\n    <section className=\"gmn__right\">\r\n      <p className=\"gmn__message\">{gameStatus === 'play' ? message : null}</p>\r\n      <p className=\"gmn__label-score\">💯 Score: <span className=\"gmn__score\">{score}</span></p>\r\n      <p className=\"gmn__label-highscore\">\r\n        🥇 Highscore: <span className=\"gmn__highscore\">{highscore}</span>\r\n      </p>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default InfoArea;","const createSecretNumber = () => {\r\n  return Math.floor(Math.random() * 20 + 1);\r\n}\r\n\r\nexport default createSecretNumber;","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { setSecretNumber } from \"../features/numberSlice\";\r\nimport createSecretNumber from \"../features/createSecretNumber\";\r\n\r\nimport './secretNumber.scss';\r\n\r\nconst SecretNumber = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const gameStatus = useSelector(state => state.guessNumber.gameStatus);\r\n  const secretNumber = useSelector(state => state.guessNumber.secretNumber);\r\n\r\n  useEffect(() => {\r\n    dispatch(setSecretNumber(createSecretNumber()));\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"gmn__number\">{gameStatus === 'play' ? '?' : secretNumber}</div>\r\n  )\r\n}\r\n\r\nexport default SecretNumber;\r\n","import { useSelector } from \"react-redux\";\r\n\r\nimport './gameTitle.scss';\r\n\r\nconst GameTitle = () => {\r\n  const gameStatus = useSelector(state => state.guessNumber.gameStatus);\r\n\r\n  const gameTitleCreater = (gameStatus) => {\r\n    switch (gameStatus) {\r\n      case 'win': \r\n        return 'You WIN! ( •̀ ω •́ )✧';\r\n      case 'lost':\r\n        return 'You LOST! (≧∇≦)ﾉ';\r\n      default: \r\n        return 'Guess My Number!';\r\n    }\r\n  }\r\n\r\n  const gameTitle = gameTitleCreater(gameStatus);\r\n\r\n  return (\r\n    <h2 className=\"gmn__title\">{gameTitle}</h2>\r\n  )\r\n}\r\n\r\nexport default GameTitle;","import { useDispatch } from \"react-redux\";\r\nimport { restartGame, setSecretNumber } from \"../features/numberSlice\";\r\nimport createSecretNumber from \"../features/createSecretNumber\";\r\n\r\nconst RestartButton = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <button \r\n      className=\"btn-guess btn-guess_again\"\r\n      onClick={() => {\r\n        dispatch(restartGame())\r\n        dispatch(setSecretNumber(createSecretNumber()))\r\n      }}\r\n    >\r\n      Again!\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default RestartButton;","import { Link } from 'react-router-dom';\r\n\r\nconst BackToAllButton = () => {\r\n  return (\r\n    <Link to={'/'}>\r\n      <button \r\n      className=\"btn-guess btn-guess_back\"\r\n      >\r\n        Main page!\r\n      </button>\r\n    </Link>\r\n    \r\n  )\r\n}\r\n\r\nexport default BackToAllButton;","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { setHighScore } from './features/numberSlice';\r\n\r\nimport FormArea from './formArea/formArea';\r\nimport InfoArea from './infoArea/infoArea';\r\nimport SecretNumber from './secretNumber/secretNumber';\r\nimport GameTitle from './gameTitle/GameTitle';\r\nimport RestartButton from './restartButton/restartButton';\r\nimport BackToAllButton from './backToAllButton/backToAllButton';\r\n\r\nimport './guessMyNumber.scss';\r\n\r\nconst GuessMyNumber = () => {\r\n\r\n  const currentHighscore = useSelector(state => state.guessNumber.highscore);\r\n  const gameStatus = useSelector(state => state.guessNumber.gameStatus);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const LSHighscore = localStorage.getItem('highscore');\r\n\r\n  useEffect(() => {\r\n    if (!LSHighscore) {\r\n      localStorage.setItem('highscore', 0);\r\n    } else {\r\n      dispatch(setHighScore(LSHighscore));\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (LSHighscore < currentHighscore) {\r\n      localStorage.setItem('highscore', currentHighscore);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [gameStatus])\r\n\r\n  let wrapperClass = 'gmn';\r\n  switch (gameStatus) {\r\n    case 'win':\r\n      wrapperClass += ' gmn_win';\r\n      break;\r\n    case 'lost':\r\n      wrapperClass += ' gmn_lost';\r\n      break;\r\n    default: \r\n      break;\r\n  }\r\n\r\n  return (\r\n    <div className={wrapperClass}>\r\n      <div className='gmn__header'>\r\n        <GameTitle/>\r\n        <p className=\"gmn__between\">\r\n          (Between 1 and 20)\r\n        </p>\r\n        <RestartButton/>\r\n        <BackToAllButton/>\r\n        <SecretNumber/>\r\n      </div>\r\n      <div className='gmn__main'>\r\n        <FormArea/>\r\n        <InfoArea/>\r\n      </div>\r\n    </div>\r\n  )\r\n} \r\n\r\nexport default GuessMyNumber;"],"names":["dispatch","useDispatch","className","initialValues","number","validationSchema","yup","min","max","required","onSubmit","resetForm","setUserNumber","changeScore","changeHighScore","setGameStatus","htmlFor","name","placeholder","type","component","selectMessage","createSelector","state","guessNumber","userNumber","secretNumber","score","useSelector","highscore","message","gameStatus","Math","floor","random","useEffect","setSecretNumber","createSecretNumber","gameTitle","gameTitleCreater","onClick","restartGame","to","currentHighscore","LSHighscore","localStorage","getItem","setHighScore","setItem","wrapperClass"],"sourceRoot":""}